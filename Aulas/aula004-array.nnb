{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# 🔷 Básico\r\n\r\n> Dado a seguinte array. Conhecendo as diversas maneiras manipular um array.\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const names = [\n    'Edu',\n    'Carlos',\n    3\n]\n\nconsole.log(names);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'Edu', 'Carlos', 3 ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Alterando os valores"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const names = ['Edu', 'Carlos', 3]\nnames[0] = 'Darley';\nnames[2] = 'Jéssica'\n\nconsole.log(names);\n\n//>> [ 'Darley', 'Carlos', 'Jéssica' ]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'Darley', 'Carlos', 'Jéssica' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> *Acessamos a index do array e reatribuímos os valores.*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### → Outra forma de se construir um array: `new Array()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const names2  = new Array('darley', 'juliana', 'jessica')\n\nconsole.log(names2);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'darley', 'juliana', 'jessica' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Deletando Valores: `delete`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "delete names[1]\n\nnames\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[90m<1 empty item>\u001b[39m,",
                                "  \u001b[32m'Jéssica'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> - *somente os valores são deletados*\r\n> - *a posição fica vazia*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "→ Reatribuindo a posição vazia"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "names[1] = 'Juliana'"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'Juliana'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Coletando valores: `[…]`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> Para tranferir os valores de uma array para outro usamos o conceito de ***spread operator***"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const alunos = [...names]\n\nalunos\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'Jéssica'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> *Os `…` Serve para ‘espalharmos’ os valores do array no conteúdo de outro*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Acrescentando valores: `.push()` | `.unshift()`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "→ **Adicionando ao final**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "alunos.push('Neia')\n\nalunos"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'Jéssica'\u001b[39m,",
                                "  \u001b[32m'Neia'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "**→Adicionando ao início**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "alunos.unshift('Arthur');\n\nalunos"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Arthur'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'Jéssica'\u001b[39m,",
                                "  \u001b[32m'Neia'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> Podemos também listar a quantidade de posições\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nalunos.length"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m5\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Removendo posições: `.pop()` | `.shift()`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "**→ Removendo do início**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let removeFinal = alunos.shift()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "**→ Removendo do final**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let removeInicio = alunos.pop()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> *Podemos ver os valores que foram removidos*"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const remove = [removeInicio, removeFinal]\n\nremove"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Neia'\u001b[39m,",
                                "  \u001b[32m'Arthur'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Fatiando o Array: `.slice()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const familia = [ 'Arthur', 'Darley', 'Juliana', 'Jéssica', 'Neia' ]\n\nfamilia.slice(0,3)\n//>> apresenta os valores do index [0] ao [3]\n\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Arthur'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "familia.slice(0, -1)\r\n\r\n//>> apresenta os valores da posição [0] ignora a última [5]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Arthur'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'Jéssica'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Invertendo os valores de um Array : `.reverse()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "familia.reverse()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Neia'\u001b[39m,",
                                "  \u001b[32m'Jéssica'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Arthur'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "#### ❇️ *Somando valores*"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var notaAluno = [8,9,7]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ">Somando usando a função `reduce()`\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var total = notaAluno.reduce((total, valor)=> {\r\n    return total + valor\r\n})\r\n\r\ntotal"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m24\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> Podemos também usar o laço de repetição `for in`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var soma = 0\r\n\r\nfor(const i in notaAluno){\r\n    soma += notaAluno[i]\r\n}\r\n\r\nsoma"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m24\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> Usando o `for of`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var soma = 0\r\nfor (const i of notaAluno){\r\n    soma += i\r\n}\r\n\r\nsoma"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m24\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "#### ❇️ *Ordenando valores*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> Podemos ordenar valores numéricos usando o método `sort()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let scores = [9,80,14,56,32,2,5]\r\n\r\nscores.sort((a, b) => a - b)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m2\u001b[39m,",
                                "  \u001b[33m5\u001b[39m,",
                                "  \u001b[33m9\u001b[39m,",
                                "  \u001b[33m14\u001b[39m,",
                                "  \u001b[33m32\u001b[39m,",
                                "  \u001b[33m56\u001b[39m,",
                                "  \u001b[33m80\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# 🔹 Avançado"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Aplicando o `map()`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> `map()` é um método que serve para percorrer os todos os elementos de uma array, e buaca o valor informado \n\n> O método retorna um valor \n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const tags=[\r\n    {id: 1, name: \"node\", note_id:1},\r\n    {id: 2, name: \"express\", note_id:1},\r\n    {id: 3, name: \"react\", note_id:1},\r\n    {id: 4, name: \"javascript\", note_id:2},\r\n    {id: 5, name: \"frontend\", note_id:2},\r\n    ];"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const newArray = tags.map(tag => {\r\n    return {\r\n        name: tag.name\r\n    }\r\n})\r\n\r\nnewArray"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    name: \u001b[32m'node'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'express'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'react'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'javascript'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'frontend'\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "- percorreu cada elemento do array e retornou o que foi definido"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const list = [\r\n    [1,3,4],\r\n    [4,3,8],\r\n    [10,31,24],\r\n    [56,3,9]\r\n  ]"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "list.map(index => index[2])\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m4\u001b[39m,",
                                "  \u001b[33m8\u001b[39m,",
                                "  \u001b[33m24\u001b[39m,",
                                "  \u001b[33m9\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Aplicando o `filter()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const arrayFilter = tags.filter(tag => tag.note_id === 2)\r\n\r\narrayFilter"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    id: \u001b[33m4\u001b[39m,",
                                "    name: \u001b[32m'javascript'\u001b[39m,",
                                "    note_id: \u001b[33m2\u001b[39m",
                                "  },",
                                "  {",
                                "    id: \u001b[33m5\u001b[39m,",
                                "    name: \u001b[32m'frontend'\u001b[39m,",
                                "    note_id: \u001b[33m2\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}