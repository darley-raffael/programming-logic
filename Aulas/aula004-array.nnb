{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# ðŸ”· BÃ¡sico\r\n\r\n> Dado a seguinte array. Conhecendo as diversas maneiras manipular um array.\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const names = [\n    'Edu',\n    'Carlos',\n    3\n]\n\nconsole.log(names);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'Edu', 'Carlos', 3 ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Alterando os valores"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const names = ['Edu', 'Carlos', 3]\nnames[0] = 'Darley';\nnames[2] = 'JÃ©ssica'\n\nconsole.log(names);\n\n//>> [ 'Darley', 'Carlos', 'JÃ©ssica' ]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'Darley', 'Carlos', 'JÃ©ssica' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> *Acessamos a index do array e reatribuÃ­mos os valores.*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### â†’ Outra forma de se construir um array: `new Array()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const names2  = new Array('darley', 'juliana', 'jessica')\n\nconsole.log(names2);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'darley', 'juliana', 'jessica' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Deletando Valores: `delete`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "delete names[1]\n\nnames\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[90m<1 empty item>\u001b[39m,",
                                "  \u001b[32m'JÃ©ssica'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> - *somente os valores sÃ£o deletados*\r\n> - *a posiÃ§Ã£o fica vazia*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "â†’ Reatribuindo a posiÃ§Ã£o vazia"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "names[1] = 'Juliana'"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'Juliana'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Coletando valores: `[â€¦]`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> Para tranferir os valores de uma array para outro usamos o conceito de ***spread operator***"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const alunos = [...names]\n\nalunos\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'JÃ©ssica'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> *Os `â€¦` Serve para â€˜espalharmosâ€™ os valores do array no conteÃºdo de outro*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Acrescentando valores: `.push()` | `.unshift()`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "â†’ **Adicionando ao final**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "alunos.push('Neia')\n\nalunos"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'JÃ©ssica'\u001b[39m,",
                                "  \u001b[32m'Neia'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "**â†’Adicionando ao inÃ­cio**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "alunos.unshift('Arthur');\n\nalunos"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Arthur'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'JÃ©ssica'\u001b[39m,",
                                "  \u001b[32m'Neia'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> Podemos tambÃ©m listar a quantidade de posiÃ§Ãµes\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nalunos.length"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m5\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Removendo posiÃ§Ãµes: `.pop()` | `.shift()`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "**â†’ Removendo do inÃ­cio**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let removeFinal = alunos.shift()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "**â†’ Removendo do final**"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let removeInicio = alunos.pop()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> *Podemos ver os valores que foram removidos*"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const remove = [removeInicio, removeFinal]\n\nremove"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Neia'\u001b[39m,",
                                "  \u001b[32m'Arthur'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Fatiando o Array: `.slice()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const familia = [ 'Arthur', 'Darley', 'Juliana', 'JÃ©ssica', 'Neia' ]\n\nfamilia.slice(0,3)\n//>> apresenta os valores do index [0] ao [3]\n\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Arthur'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "familia.slice(0, -1)\n\n//>> apresenta os valores da posiÃ§Ã£o [0] ignora a Ãºltima [5]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Arthur'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'JÃ©ssica'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Invertendo os valores de um Array : `.reverse()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "familia.reverse()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Neia'\u001b[39m,",
                                "  \u001b[32m'JÃ©ssica'\u001b[39m,",
                                "  \u001b[32m'Juliana'\u001b[39m,",
                                "  \u001b[32m'Darley'\u001b[39m,",
                                "  \u001b[32m'Arthur'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "#### *Somando valores*"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var notaAluno = [8,9,7]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ">Somando usando a funÃ§Ã£o `reduce()`\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var total = notaAluno.reduce((total, valor)=> {\n    return total + valor\n})\n\ntotal"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m24\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> Podemos tambÃ©m usar o laÃ§o de repetiÃ§Ã£o `for in`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var soma = 0\n\nfor(const i in notaAluno){\n    soma += notaAluno[i]\n}\n\nsoma"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m24\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "> Usando o `for of`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var soma = 0\nfor (const i of notaAluno){\n    soma += i\n}\n\nsoma"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m24\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# ðŸ”¹ AvanÃ§ado"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Aplicando o `map()`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> `map()` Ã© um mÃ©todo que serve para percorrer os todos os elementos de uma array, e buaca o valor informado \n\n> O mÃ©todo retorna um valor \n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const tags=[\n    {id: 1, name: \"node\", note_id:1},\n    {id: 2, name: \"express\", note_id:1},\n    {id: 3, name: \"react\", note_id:1},\n    {id: 4, name: \"javascript\", note_id:2},\n    {id: 5, name: \"frontend\", note_id:2},\n    ];"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const newArray = tags.map(tag => {\n    return {\n        name: tag.name\n    }\n})\n\nnewArray"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    name: \u001b[32m'node'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'express'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'react'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'javascript'\u001b[39m",
                                "  },",
                                "  {",
                                "    name: \u001b[32m'frontend'\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "- percorreu cada elemento do array e retornou o que foi definido"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const list = [\n    [1,3,4],\n    [4,3,8],\n    [10,31,24],\n    [56,3,9]\n  ]"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "list.map(index => index[2])\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m4\u001b[39m,",
                                "  \u001b[33m8\u001b[39m,",
                                "  \u001b[33m24\u001b[39m,",
                                "  \u001b[33m9\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Aplicando o `filter()`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const arrayFilter = tags.filter(tag => tag.note_id === 2)\n\narrayFilter"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    id: \u001b[33m4\u001b[39m,",
                                "    name: \u001b[32m'javascript'\u001b[39m,",
                                "    note_id: \u001b[33m2\u001b[39m",
                                "  },",
                                "  {",
                                "    id: \u001b[33m5\u001b[39m,",
                                "    name: \u001b[32m'frontend'\u001b[39m,",
                                "    note_id: \u001b[33m2\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}